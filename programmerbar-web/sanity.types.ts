/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ProductType = {
	_id: string;
	_type: 'productType';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
};

export type Product = {
	_id: string;
	_type: 'product';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	sku?: string;
	name: string;
	description?: string;
	productType?: Array<{
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: 'productType';
	}>;
	isSoldOut: boolean;
	priceList: Price;
	volume?: number;
	alcoholContent?: number;
	variants?: Array<string>;
	image?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: 'image';
	};
	producer?: {
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: 'producer';
	};
};

export type Price = {
	_type: 'price';
	ordinary: number;
	student: number;
	internal: number;
	credits?: number;
};

export type Producer = {
	_id: string;
	_type: 'producer';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name: string;
	logo?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: 'image';
	};
};

export type MediaTag = {
	_id: string;
	_type: 'media.tag';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: Slug;
};

export type Markdown = string;

export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch';
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: 'sanity.imagePalette';
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions';
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot';
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageCrop = {
	_type: 'sanity.imageCrop';
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityFileAsset = {
	_id: string;
	_type: 'sanity.fileAsset';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
	_id: string;
	_type: 'sanity.imageAsset';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata';
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type Geopoint = {
	_type: 'geopoint';
	lat?: number;
	lng?: number;
	alt?: number;
};

export type Slug = {
	_type: 'slug';
	current: string;
	source?: string;
};

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData';
	name?: string;
	id?: string;
	url?: string;
};

export type AllSanitySchemaTypes =
	| ProductType
	| Product
	| Price
	| Producer
	| MediaTag
	| Markdown
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityImageHotspot
	| SanityImageCrop
	| SanityFileAsset
	| SanityImageAsset
	| SanityImageMetadata
	| Geopoint
	| Slug
	| SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../programmerbar-web/src/lib/api/sanity/events.ts
// Variable: getEventsQuery
// Query: *[	_type == "happening" &&	!(_id in path("drafts.**")) &&	"programmerbar" in organizers[]->slug.current &&	date >= now()] | order(date asc) {	_id,	title,	"slug": slug.current,	date,	registrationStart,	_createdAt,	body}[0...6]
export type GetEventsQueryResult = Array<never>;
// Variable: getUpcomingEventsQuery
// Query: *[	_type == "happening" &&	!(_id in path("drafts.**")) &&	"programmerbar" in organizers[]->slug.current &&	date > now()] | order(date asc) {	_id,	title,	"slug": slug.current,	date,	registrationStart,	_createdAt,	body}
export type GetUpcomingEventsQueryResult = Array<never>;
// Variable: getEventBySlugQuery
// Query: *[	_type == "happening" &&	!(_id in path("drafts.**")) &&	"programmerbar" in organizers[]->slug.current &&	slug.current == $slug] {	_id,	title,	"slug": slug.current,	date,	registrationStart,	_createdAt,	body}[0]
export type GetEventBySlugQueryResult = null;
// Variable: getRepeatingEventsQuery
// Query: *[	_type == "repeatingHappening" &&	!(_id in path("drafts.**")) &&	"programmerbar" in organizers[]->slug.current] | order(date asc) {	_id,	title,	dayOfWeek,	startTime,	endTime,	startDate,	ignoredDates,	endDate,	interval,	_createdAt,	"slug": slug.current,	body}
export type GetRepeatingEventsQueryResult = Array<never>;
// Variable: getRepeatingEventBySlugQuery
// Query: *[	_type == "repeatingHappening" &&	!(_id in path("drafts.**")) &&	"programmerbar" in organizers[]->slug.current &&	slug.current == $slug] {	_id,	title,	dayOfWeek,	startTime,	endTime,	startDate,	ignoredDates,	endDate,	interval,	_createdAt,	"slug": slug.current,	body}[0]
export type GetRepeatingEventBySlugQueryResult = null;

// Source: ../programmerbar-web/src/lib/api/sanity/products.ts
// Variable: getProductsQuery
// Query: *[_type == "product" && !(_id in path("drafts.**"))] {    _id,    sku,    name,    description,    "productTypes": productType[]->{        _id,        title    },    isSoldOut,    priceList,    image,    "producer": producer->name,    volume,    alcoholContent,    variants,}
export type GetProductsQueryResult = Array<{
	_id: string;
	sku: string | null;
	name: string;
	description: string | null;
	productTypes: Array<{
		_id: string;
		title: string;
	}> | null;
	isSoldOut: boolean;
	priceList: Price;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: 'image';
	} | null;
	producer: string | null;
	volume: number | null;
	alcoholContent: number | null;
	variants: Array<string> | null;
}>;
// Variable: getProductByIdQuery
// Query: *[_type == "product" && _id == $id && !(_id in path("drafts.**"))] {    _id,    sku,    name,    description,    "productTypes": productType[]->{        _id,        title    },    isSoldOut,    priceList,    image,    "producer": producer->name,    volume,    alcoholContent,    variants,}[0]
export type GetProductByIdQueryResult = {
	_id: string;
	sku: string | null;
	name: string;
	description: string | null;
	productTypes: Array<{
		_id: string;
		title: string;
	}> | null;
	isSoldOut: boolean;
	priceList: Price;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: 'image';
	} | null;
	producer: string | null;
	volume: number | null;
	alcoholContent: number | null;
	variants: Array<string> | null;
} | null;

// Source: ../programmerbar-web/src/lib/api/sanity/programmerbar.ts
// Variable: query
// Query: *[_type == "studentGroup"    && slug.current == $slug    && !(_id in path('drafts.**'))] {    _id,    _createdAt,    _updatedAt,    name,    groupType,    "slug": slug.current,    description,    image,    "members": members[] {      role,      "profile": profile->{        _id,        name,        picture,        socials,      },    },    "socials": socials {      facebook,      instagram,      linkedin,      email,    }  }[0]
export type QueryResult = null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
	interface SanityQueries {
		'*[\n\t_type == "happening" &&\n\t!(_id in path("drafts.**")) &&\n\t"programmerbar" in organizers[]->slug.current &&\n\tdate >= now()\n] | order(date asc) {\n\t_id,\n\ttitle,\n\t"slug": slug.current,\n\tdate,\n\tregistrationStart,\n\t_createdAt,\n\tbody\n}[0...6]': GetEventsQueryResult;
		'*[\n\t_type == "happening" &&\n\t!(_id in path("drafts.**")) &&\n\t"programmerbar" in organizers[]->slug.current &&\n\tdate > now()\n] | order(date asc) {\n\t_id,\n\ttitle,\n\t"slug": slug.current,\n\tdate,\n\tregistrationStart,\n\t_createdAt,\n\tbody\n}': GetUpcomingEventsQueryResult;
		'*[\n\t_type == "happening" &&\n\t!(_id in path("drafts.**")) &&\n\t"programmerbar" in organizers[]->slug.current &&\n\tslug.current == $slug\n] {\n\t_id,\n\ttitle,\n\t"slug": slug.current,\n\tdate,\n\tregistrationStart,\n\t_createdAt,\n\tbody\n}[0]': GetEventBySlugQueryResult;
		'*[\n\t_type == "repeatingHappening" &&\n\t!(_id in path("drafts.**")) &&\n\t"programmerbar" in organizers[]->slug.current\n] | order(date asc) {\n\t_id,\n\ttitle,\n\tdayOfWeek,\n\tstartTime,\n\tendTime,\n\tstartDate,\n\tignoredDates,\n\tendDate,\n\tinterval,\n\t_createdAt,\n\t"slug": slug.current,\n\tbody\n}': GetRepeatingEventsQueryResult;
		'*[\n\t_type == "repeatingHappening" &&\n\t!(_id in path("drafts.**")) &&\n\t"programmerbar" in organizers[]->slug.current &&\n\tslug.current == $slug\n] {\n\t_id,\n\ttitle,\n\tdayOfWeek,\n\tstartTime,\n\tendTime,\n\tstartDate,\n\tignoredDates,\n\tendDate,\n\tinterval,\n\t_createdAt,\n\t"slug": slug.current,\n\tbody\n}[0]': GetRepeatingEventBySlugQueryResult;
		'*[_type == "product" && !(_id in path("drafts.**"))] {\n    _id,\n    sku,\n    name,\n    description,\n    "productTypes": productType[]->{\n        _id,\n        title\n    },\n    isSoldOut,\n    priceList,\n    image,\n    "producer": producer->name,\n    volume,\n    alcoholContent,\n    variants,\n}': GetProductsQueryResult;
		'*[_type == "product" && _id == $id && !(_id in path("drafts.**"))] {\n    _id,\n    sku,\n    name,\n    description,\n    "productTypes": productType[]->{\n        _id,\n        title\n    },\n    isSoldOut,\n    priceList,\n    image,\n    "producer": producer->name,\n    volume,\n    alcoholContent,\n    variants,\n}[0]': GetProductByIdQueryResult;
		'*[_type == "studentGroup"\n    && slug.current == $slug\n    && !(_id in path(\'drafts.**\'))] {\n    _id,\n    _createdAt,\n    _updatedAt,\n    name,\n    groupType,\n    "slug": slug.current,\n    description,\n    image,\n    "members": members[] {\n      role,\n      "profile": profile->{\n        _id,\n        name,\n        picture,\n        socials,\n      },\n    },\n    "socials": socials {\n      facebook,\n      instagram,\n      linkedin,\n      email,\n    }\n  }[0]': QueryResult;
	}
}
