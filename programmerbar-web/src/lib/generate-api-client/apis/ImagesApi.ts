/* tslint:disable */
/* eslint-disable */
/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { ImageResponse } from '../models/index';
import { ImageResponseFromJSON, ImageResponseToJSON } from '../models/index';

export interface GetImageByIdRequest {
	id: string;
}

/**
 *
 */
export class ImagesApi extends runtime.BaseAPI {
	/**
	 * Serves the actual image file data from S3-compatible storage. Returns the image with appropriate headers including content type, caching directives, and metadata. This endpoint is public and does not require authentication for viewing images.  # Parameters * `id` - The unique identifier of the image to retrieve  # Response Headers - Content-Type: Matches the original image format - Cache-Control: Configured for efficient caching - ETag: For conditional requests - Last-Modified: When the image was uploaded
	 * Retrieve an image file by its ID.
	 */
	async getImageByIdRaw(
		requestParameters: GetImageByIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling getImageById().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/images/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Serves the actual image file data from S3-compatible storage. Returns the image with appropriate headers including content type, caching directives, and metadata. This endpoint is public and does not require authentication for viewing images.  # Parameters * `id` - The unique identifier of the image to retrieve  # Response Headers - Content-Type: Matches the original image format - Cache-Control: Configured for efficient caching - ETag: For conditional requests - Last-Modified: When the image was uploaded
	 * Retrieve an image file by its ID.
	 */
	async getImageById(
		requestParameters: GetImageByIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.getImageByIdRaw(requestParameters, initOverrides);
	}

	/**
	 * Accepts multipart form data with an image file and uploads it to S3-compatible storage. The uploaded image is validated for format and size, then stored with a unique filename. Metadata about the image is saved to the database for future reference.  # Supported Formats - JPEG (.jpg) - PNG (.png) - GIF (.gif) - WebP (.webp)  # Authentication Requires a valid session token to upload images.  # Form Data Must include a field named \"image\" containing the image file.
	 * Upload an image file to the server.
	 */
	async uploadImageRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<ImageResponse>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/images/upload`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => ImageResponseFromJSON(jsonValue));
	}

	/**
	 * Accepts multipart form data with an image file and uploads it to S3-compatible storage. The uploaded image is validated for format and size, then stored with a unique filename. Metadata about the image is saved to the database for future reference.  # Supported Formats - JPEG (.jpg) - PNG (.png) - GIF (.gif) - WebP (.webp)  # Authentication Requires a valid session token to upload images.  # Form Data Must include a field named \"image\" containing the image file.
	 * Upload an image file to the server.
	 */
	async uploadImage(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<ImageResponse> {
		const response = await this.uploadImageRaw(initOverrides);
		return await response.value();
	}
}
