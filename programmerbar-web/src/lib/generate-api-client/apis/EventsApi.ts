/* tslint:disable */
/* eslint-disable */
/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	CreateEventResponse,
	EventWithShifts,
	NewEventWithShiftsInput
} from '../models/index';
import {
	CreateEventResponseFromJSON,
	CreateEventResponseToJSON,
	EventWithShiftsFromJSON,
	EventWithShiftsToJSON,
	NewEventWithShiftsInputFromJSON,
	NewEventWithShiftsInputToJSON
} from '../models/index';

export interface CreateEventRequest {
	newEventWithShiftsInput: NewEventWithShiftsInput;
}

/**
 *
 */
export class EventsApi extends runtime.BaseAPI {
	/**
	 * # Authentication Requires a valid session token to access.
	 * Get all events with their associated volunteer shifts.
	 */
	async allEventsRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<EventWithShifts>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/events`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			jsonValue.map(EventWithShiftsFromJSON)
		);
	}

	/**
	 * # Authentication Requires a valid session token to access.
	 * Get all events with their associated volunteer shifts.
	 */
	async allEvents(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<EventWithShifts>> {
		const response = await this.allEventsRaw(initOverrides);
		return await response.value();
	}

	/**
	 * # Authentication Requires a valid session token to access.
	 * Create a new event with associated volunteer shifts.
	 */
	async createEventRaw(
		requestParameters: CreateEventRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<CreateEventResponse>> {
		if (requestParameters['newEventWithShiftsInput'] == null) {
			throw new runtime.RequiredError(
				'newEventWithShiftsInput',
				'Required parameter "newEventWithShiftsInput" was null or undefined when calling createEvent().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/events`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: NewEventWithShiftsInputToJSON(requestParameters['newEventWithShiftsInput'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			CreateEventResponseFromJSON(jsonValue)
		);
	}

	/**
	 * # Authentication Requires a valid session token to access.
	 * Create a new event with associated volunteer shifts.
	 */
	async createEvent(
		requestParameters: CreateEventRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<CreateEventResponse> {
		const response = await this.createEventRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
