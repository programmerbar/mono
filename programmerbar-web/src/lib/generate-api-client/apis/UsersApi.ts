/* tslint:disable */
/* eslint-disable */
/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { EventUser, FullUser } from '../models/index';
import {
	EventUserFromJSON,
	EventUserToJSON,
	FullUserFromJSON,
	FullUserToJSON
} from '../models/index';

export interface GetUserRequest {
	id: string;
}

export interface UpdateUserRequest {
	id: string;
	eventUser: EventUser;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI {
	/**
	 * Get profile information of the authenticated user.
	 */
	async getProfileRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<FullUser>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/users/me`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => FullUserFromJSON(jsonValue));
	}

	/**
	 * Get profile information of the authenticated user.
	 */
	async getProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullUser> {
		const response = await this.getProfileRaw(initOverrides);
		return await response.value();
	}

	/**
	 * This endpoint retrieves a user\'s profile information by their ID.
	 * Get a user by ID.
	 */
	async getUserRaw(
		requestParameters: GetUserRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<FullUser>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling getUser().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/users/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => FullUserFromJSON(jsonValue));
	}

	/**
	 * This endpoint retrieves a user\'s profile information by their ID.
	 * Get a user by ID.
	 */
	async getUser(
		requestParameters: GetUserRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<FullUser> {
		const response = await this.getUserRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * This endpoint is accessible to authenticated users, including board members and regular members.
	 * List all users, by default it only lists the active users.
	 */
	async listUsersRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<EventUser>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/users`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventUserFromJSON));
	}

	/**
	 * This endpoint is accessible to authenticated users, including board members and regular members.
	 * List all users, by default it only lists the active users.
	 */
	async listUsers(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<EventUser>> {
		const response = await this.listUsersRaw(initOverrides);
		return await response.value();
	}

	/**
	 * A user can either updated themselves or a board member can update any user.
	 * Update a user by ID.
	 */
	async updateUserRaw(
		requestParameters: UpdateUserRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<EventUser>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling updateUser().'
			);
		}

		if (requestParameters['eventUser'] == null) {
			throw new runtime.RequiredError(
				'eventUser',
				'Required parameter "eventUser" was null or undefined when calling updateUser().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/users/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters,
				body: EventUserToJSON(requestParameters['eventUser'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => EventUserFromJSON(jsonValue));
	}

	/**
	 * A user can either updated themselves or a board member can update any user.
	 * Update a user by ID.
	 */
	async updateUser(
		requestParameters: UpdateUserRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<EventUser> {
		const response = await this.updateUserRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
