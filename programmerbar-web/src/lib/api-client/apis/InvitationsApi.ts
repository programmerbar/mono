/* tslint:disable */
/* eslint-disable */
/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { Invitation, NewInvitationInput } from '../models/index';
import {
	InvitationFromJSON,
	InvitationToJSON,
	NewInvitationInputFromJSON,
	NewInvitationInputToJSON
} from '../models/index';

export interface DeleteInvitationRequest {
	id: string;
}

export interface SendInvitationRequest {
	newInvitationInput: NewInvitationInput;
}

/**
 *
 */
export class InvitationsApi extends runtime.BaseAPI {
	/**
	 * # Authentication This endpoint requires authentication via a session token.
	 * Delete an invitation by ID
	 */
	async deleteInvitationRaw(
		requestParameters: DeleteInvitationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling deleteInvitation().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/invitations/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * # Authentication This endpoint requires authentication via a session token.
	 * Delete an invitation by ID
	 */
	async deleteInvitation(
		requestParameters: DeleteInvitationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deleteInvitationRaw(requestParameters, initOverrides);
	}

	/**
	 * # Authentication This endpoint requires authentication via a session token.
	 * Get all invitations sent
	 */
	async listInvitationsRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Invitation>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/invitations`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvitationFromJSON));
	}

	/**
	 * # Authentication This endpoint requires authentication via a session token.
	 * Get all invitations sent
	 */
	async listInvitations(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Invitation>> {
		const response = await this.listInvitationsRaw(initOverrides);
		return await response.value();
	}

	/**
	 * # Authentication This endpoint requires authentication via a session token.
	 * Send an invitation to a email to join the platform
	 */
	async sendInvitationRaw(
		requestParameters: SendInvitationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters['newInvitationInput'] == null) {
			throw new runtime.RequiredError(
				'newInvitationInput',
				'Required parameter "newInvitationInput" was null or undefined when calling sendInvitation().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/invitations`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: NewInvitationInputToJSON(requestParameters['newInvitationInput'])
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * # Authentication This endpoint requires authentication via a session token.
	 * Send an invitation to a email to join the platform
	 */
	async sendInvitation(
		requestParameters: SendInvitationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.sendInvitationRaw(requestParameters, initOverrides);
	}
}
