/* tslint:disable */
/* eslint-disable */
/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

export interface FeideCallbackRequest {
	code: string;
	state: string;
}

/**
 *
 */
export class AuthenticationApi extends runtime.BaseAPI {
	/**
	 * Redirects the user to Feide (Norwegian education federation) for authentication. This is the first step in the OAuth flow. After successful authentication, the user will be redirected back to the callback endpoint.  Sets a secure state cookie to prevent CSRF attacks during the OAuth flow.
	 * Initiate OAuth authentication with Feide.
	 */
	async feideAuthRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/auth/feide`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Redirects the user to Feide (Norwegian education federation) for authentication. This is the first step in the OAuth flow. After successful authentication, the user will be redirected back to the callback endpoint.  Sets a secure state cookie to prevent CSRF attacks during the OAuth flow.
	 * Initiate OAuth authentication with Feide.
	 */
	async feideAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
		await this.feideAuthRaw(initOverrides);
	}

	/**
	 * This endpoint receives the authorization code from Feide after successful authentication. It validates the state parameter, exchanges the code for tokens, retrieves user information, and either creates a new user account (if invited) or logs in an existing user.  # Parameters * `code` - Authorization code from Feide OAuth * `state` - State parameter for CSRF protection  # User Creation New users can only be created if they have a valid invitation in the system. The invitation is matched by email address and deleted after successful account creation.
	 * Handle OAuth callback from Feide authentication.
	 */
	async feideCallbackRaw(
		requestParameters: FeideCallbackRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters['code'] == null) {
			throw new runtime.RequiredError(
				'code',
				'Required parameter "code" was null or undefined when calling feideCallback().'
			);
		}

		if (requestParameters['state'] == null) {
			throw new runtime.RequiredError(
				'state',
				'Required parameter "state" was null or undefined when calling feideCallback().'
			);
		}

		const queryParameters: any = {};

		if (requestParameters['code'] != null) {
			queryParameters['code'] = requestParameters['code'];
		}

		if (requestParameters['state'] != null) {
			queryParameters['state'] = requestParameters['state'];
		}

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/auth/feide/callback`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * This endpoint receives the authorization code from Feide after successful authentication. It validates the state parameter, exchanges the code for tokens, retrieves user information, and either creates a new user account (if invited) or logs in an existing user.  # Parameters * `code` - Authorization code from Feide OAuth * `state` - State parameter for CSRF protection  # User Creation New users can only be created if they have a valid invitation in the system. The invitation is matched by email address and deleted after successful account creation.
	 * Handle OAuth callback from Feide authentication.
	 */
	async feideCallback(
		requestParameters: FeideCallbackRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.feideCallbackRaw(requestParameters, initOverrides);
	}

	/**
	 * Terminates the user\'s current session by deleting it from the database and clearing the session cookie. After logout, the user will need to authenticate again to access protected endpoints.  # Authentication Requires a valid session token.
	 * Log out the authenticated user.
	 */
	async logoutRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/auth/logout`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Terminates the user\'s current session by deleting it from the database and clearing the session cookie. After logout, the user will need to authenticate again to access protected endpoints.  # Authentication Requires a valid session token.
	 * Log out the authenticated user.
	 */
	async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
		await this.logoutRaw(initOverrides);
	}
}
