/* tslint:disable */
/* eslint-disable */
/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CreateProductJson, FullProduct } from '../models/index';
import {
	CreateProductJsonFromJSON,
	CreateProductJsonToJSON,
	FullProductFromJSON,
	FullProductToJSON
} from '../models/index';

export interface CreateProductRequest {
	createProductJson: CreateProductJson;
}

export interface GetProductByIdRequest {
	id: string;
}

/**
 *
 */
export class ProductsApi extends runtime.BaseAPI {
	/**
	 * Returns a complete list of all products including beers, beverages, and other items available for purchase. This endpoint is public and does not require authentication. Each product includes pricing information, availability status, and metadata.
	 * Get all products available in the bar.
	 */
	async allProductsRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<FullProduct>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/products`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FullProductFromJSON));
	}

	/**
	 * Returns a complete list of all products including beers, beverages, and other items available for purchase. This endpoint is public and does not require authentication. Each product includes pricing information, availability status, and metadata.
	 * Get all products available in the bar.
	 */
	async allProducts(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<FullProduct>> {
		const response = await this.allProductsRaw(initOverrides);
		return await response.value();
	}

	/**
	 * Adds a new product to the bar\'s inventory system. This endpoint is restricted to board members only as it involves inventory management and pricing decisions. The created product will be immediately available for purchase.  # Authentication Requires board member privileges (role: \"board\").  # Request Body Must include all required product information including name, pricing, and metadata.
	 * Create a new product in the bar inventory.
	 */
	async createProductRaw(
		requestParameters: CreateProductRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<FullProduct>> {
		if (requestParameters['createProductJson'] == null) {
			throw new runtime.RequiredError(
				'createProductJson',
				'Required parameter "createProductJson" was null or undefined when calling createProduct().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		let urlPath = `/products`;

		const response = await this.request(
			{
				path: urlPath,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: CreateProductJsonToJSON(requestParameters['createProductJson'])
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => FullProductFromJSON(jsonValue));
	}

	/**
	 * Adds a new product to the bar\'s inventory system. This endpoint is restricted to board members only as it involves inventory management and pricing decisions. The created product will be immediately available for purchase.  # Authentication Requires board member privileges (role: \"board\").  # Request Body Must include all required product information including name, pricing, and metadata.
	 * Create a new product in the bar inventory.
	 */
	async createProduct(
		requestParameters: CreateProductRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<FullProduct> {
		const response = await this.createProductRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieves detailed information about a single product including its pricing, availability, alcohol content, and other metadata. This endpoint is public and does not require authentication.  # Parameters * `id` - The unique identifier of the product to retrieve
	 * Get a specific product by its ID.
	 */
	async getProductByIdRaw(
		requestParameters: GetProductByIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<FullProduct>> {
		if (requestParameters['id'] == null) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter "id" was null or undefined when calling getProductById().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		let urlPath = `/products/{id}`;
		urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

		const response = await this.request(
			{
				path: urlPath,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => FullProductFromJSON(jsonValue));
	}

	/**
	 * Retrieves detailed information about a single product including its pricing, availability, alcohol content, and other metadata. This endpoint is public and does not require authentication.  # Parameters * `id` - The unique identifier of the product to retrieve
	 * Get a specific product by its ID.
	 */
	async getProductById(
		requestParameters: GetProductByIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<FullProduct> {
		const response = await this.getProductByIdRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
